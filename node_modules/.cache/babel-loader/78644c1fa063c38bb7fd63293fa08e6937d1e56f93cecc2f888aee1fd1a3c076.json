{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nexport const useFolderScanner = () => {\n  _s();\n  const [folderData, setFolderData] = useState(null);\n  const [isScanning, setIsScanning] = useState(false);\n  const [error, setError] = useState(null);\n  const scanFolder = useCallback(async folderPath => {\n    setIsScanning(true);\n    setError(null);\n    try {\n      // For now, we'll simulate the folder scanning\n      // In a real implementation, this would use the File System Access API\n      // or a backend service to scan the folder\n\n      // Simulate async operation\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Mock data for demonstration\n      const mockFiles = ['file1.csv', 'file2.csv', 'data.csv', 'sample.csv'];\n      const newFolderData = {\n        path: folderPath,\n        fileCount: mockFiles.length,\n        files: mockFiles,\n        lastScanned: new Date()\n      };\n      setFolderData(newFolderData);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to scan folder');\n    } finally {\n      setIsScanning(false);\n    }\n  }, []);\n  const resetFolder = useCallback(() => {\n    setFolderData(null);\n    setError(null);\n  }, []);\n  return {\n    folderData,\n    isScanning,\n    error,\n    scanFolder,\n    resetFolder\n  };\n};\n_s(useFolderScanner, \"Litx6ijD2m8vwLm5/yApjvyZ/KI=\");","map":{"version":3,"names":["useState","useCallback","useFolderScanner","_s","folderData","setFolderData","isScanning","setIsScanning","error","setError","scanFolder","folderPath","Promise","resolve","setTimeout","mockFiles","newFolderData","path","fileCount","length","files","lastScanned","Date","err","Error","message","resetFolder"],"sources":["/Users/ConScholar/Projects/Training/BigData/ExcelGenerator/src/hooks/useFolderScanner.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { FolderData } from '../types/FolderData';\n\nexport const useFolderScanner = () => {\n\tconst [folderData, setFolderData] = useState<FolderData | null>(null);\n\tconst [isScanning, setIsScanning] = useState(false);\n\tconst [error, setError] = useState<string | null>(null);\n\n\tconst scanFolder = useCallback(async (folderPath: string) => {\n\t\tsetIsScanning(true);\n\t\tsetError(null);\n\t\t\n\t\ttry {\n\t\t\t// For now, we'll simulate the folder scanning\n\t\t\t// In a real implementation, this would use the File System Access API\n\t\t\t// or a backend service to scan the folder\n\t\t\t\n\t\t\t// Simulate async operation\n\t\t\tawait new Promise(resolve => setTimeout(resolve, 1000));\n\t\t\t\n\t\t\t// Mock data for demonstration\n\t\t\tconst mockFiles = [\n\t\t\t\t'file1.csv',\n\t\t\t\t'file2.csv',\n\t\t\t\t'data.csv',\n\t\t\t\t'sample.csv'\n\t\t\t];\n\t\t\t\n\t\t\tconst newFolderData: FolderData = {\n\t\t\t\tpath: folderPath,\n\t\t\t\tfileCount: mockFiles.length,\n\t\t\t\tfiles: mockFiles,\n\t\t\t\tlastScanned: new Date()\n\t\t\t};\n\t\t\t\n\t\t\tsetFolderData(newFolderData);\n\t\t} catch (err) {\n\t\t\tsetError(err instanceof Error ? err.message : 'Failed to scan folder');\n\t\t} finally {\n\t\t\tsetIsScanning(false);\n\t\t}\n\t}, []);\n\n\tconst resetFolder = useCallback(() => {\n\t\tsetFolderData(null);\n\t\tsetError(null);\n\t}, []);\n\n\treturn {\n\t\tfolderData,\n\t\tisScanning,\n\t\terror,\n\t\tscanFolder,\n\t\tresetFolder\n\t};\n};\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAG7C,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGL,QAAQ,CAAoB,IAAI,CAAC;EACrE,MAAM,CAACM,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAgB,IAAI,CAAC;EAEvD,MAAMU,UAAU,GAAGT,WAAW,CAAC,MAAOU,UAAkB,IAAK;IAC5DJ,aAAa,CAAC,IAAI,CAAC;IACnBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACH;MACA;MACA;;MAEA;MACA,MAAM,IAAIG,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;MAEvD;MACA,MAAME,SAAS,GAAG,CACjB,WAAW,EACX,WAAW,EACX,UAAU,EACV,YAAY,CACZ;MAED,MAAMC,aAAyB,GAAG;QACjCC,IAAI,EAAEN,UAAU;QAChBO,SAAS,EAAEH,SAAS,CAACI,MAAM;QAC3BC,KAAK,EAAEL,SAAS;QAChBM,WAAW,EAAE,IAAIC,IAAI,CAAC;MACvB,CAAC;MAEDjB,aAAa,CAACW,aAAa,CAAC;IAC7B,CAAC,CAAC,OAAOO,GAAG,EAAE;MACbd,QAAQ,CAACc,GAAG,YAAYC,KAAK,GAAGD,GAAG,CAACE,OAAO,GAAG,uBAAuB,CAAC;IACvE,CAAC,SAAS;MACTlB,aAAa,CAAC,KAAK,CAAC;IACrB;EACD,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMmB,WAAW,GAAGzB,WAAW,CAAC,MAAM;IACrCI,aAAa,CAAC,IAAI,CAAC;IACnBI,QAAQ,CAAC,IAAI,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACNL,UAAU;IACVE,UAAU;IACVE,KAAK;IACLE,UAAU;IACVgB;EACD,CAAC;AACF,CAAC;AAACvB,EAAA,CApDWD,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}